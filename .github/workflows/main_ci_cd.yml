name: Main Server CI/CD

on:
  pull_request:
    branches: [ "main" ]
    types: [ "closed" ]

permissions:
  contents: read

jobs:
  validate-branch:
    if: startsWith(${{ github.head_ref }}, 'release-')
    runs-on: ubuntu-latest
    steps:
      - name: Validate branch
        run: |
          BRANCH_NAME=${{ github.head_ref }}
          if [[ ! "$BRANCH_NAME" =~ ^release-[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            echo "$BRANCH_NAME does not match the pattern release-x.y.z"
            exit 1
          fi

  validate-merged:
    needs: validate-branch
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Validate merged
        run: |
          echo 'The PR was merged'
  
  extract-version:
    needs: validate-merged
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
    steps:
      # - name: checkout
      #   uses: actions/checkout@v4
      #   with:
      #     ref: ${{ env.GITHUB_SHA }}
          
      - name: extract version
        id: extract-version
        run: |
          BRANCH_NAME=${{ github.head_ref }}
          echo "version=$(echo $BRANCH_NAME | egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')" >> "$GITHUB_OUTPUT"
          
  build:
    needs: extract-version
    runs-on: ubuntu-latest
    steps:  
      - name: Checkout
        uses: actions/checkout@v4    
        with:
          submodules: true
          token: ${{ secrets.TOKEN }}
      
      - name: Setup JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
  
      - name: Setup Docker
        run: docker compose up -d
  
      - name: Grant execute permission
        run: chmod +x ./gradlew
  
      - name: Build with Gradle
        run: ./gradlew clean build -x test
  
      - name: Test with Gradle
        run: ./gradlew test

  deploy:
    needs: [build, extract-version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.TOKEN }}
  
      - name: Docker build & push
        run: |
          ./gradlew bootjar
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile-prod -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_PROD_IMAGE }}:${{ needs.extract-version.outputs.version }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_PROD_IMAGE }}:${{ needs.extract-version.outputs.version }}
  
      - name: Deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          port: ${{ secrets.PROD_SERVER_PORT }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          debug: true
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_PROD_IMAGE }}:${{ needs.extract-version.outputs.version }}
            docker stop ${{ secrets.CONTAINER_NAME }}
            docker rm ${{ secrets.CONTAINER_NAME }}
            docker run --name=${{ secrets.CONTAINER_NAME }} --cpus=2 --memory=8g -d -p 8080-8082:8080-8082 -v $HOME/logs:/logs ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_PROD_IMAGE }}:${{ needs.extract-version.outputs.version }}
            docker container prune -f
            docker image prune -f

  create-release:
    needs: [deploy, extract-version]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: create release
        uses: ncipollo/release-action@v1.13.0
        with: 
          tag: ${{ needs.extract-version.outputs.version }}
          name: ${{ needs.extract-version.outputs.version }}
